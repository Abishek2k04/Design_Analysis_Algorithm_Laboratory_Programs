function floydWarshall(graph, n):
    for k from 0 to n-1:
        for i from 0 to n-1:
            for j from 0 to n-1:
                graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])

function main():
    Input the number of vertices n
    Create a 2D array graph[n][n]
    Initialize graph[][] with large values (100) for all edges, and 0 for diagonal elements
    Accept input for the weights of edges between vertices from the user
    
    Call floydWarshall(graph, n)
    
    Output the shortest path matrix

main()

#############################################ALGORITHM##################################################################
Here's a step-by-step algorithm for the program that uses the Floyd-Warshall algorithm to compute the shortest paths between all pairs of vertices in a graph:

1. **Start**
2. **Define `floydWarshall(graph, n)` function**:
   a. Iterate over each intermediate vertex `k` from 0 to `n-1`.
   b. For each pair of vertices `i` and `j`:
      i. Check if the current distance `graph[i][j]` is greater than the sum of distances from `i` to `k` and from `k` to `j`.
      ii. If so, update `graph[i][j]` to the sum of distances from `i` to `k` and from `k` to `j`.
3. **Define `main()` function**:
   a. Declare variables `n`, `i`, `j`.
   b. Prompt the user to input the number of vertices `n`.
   c. Dynamically allocate memory for a 2D array `graph` of size `n x n`.
   d. Initialize `graph` such that diagonal elements are 0 and other elements are set to 100 (representing infinity).
   e. Prompt the user to input the edges of the graph and update the `graph` array accordingly.
   f. Display "The original graph is:" followed by the elements of the `graph` array.
   g. Call `floydWarshall(graph, n)` function to compute shortest paths.
   h. Display "The shortest path matrix is:" followed by the elements of the updated `graph` array.
4. **End**

This step-by-step algorithm outlines the process of implementing the Floyd-Warshall algorithm to compute the shortest paths between all pairs of vertices in a graph, as well as the necessary input and output steps in the main function.

